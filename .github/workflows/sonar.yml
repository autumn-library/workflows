name: Контроль качества

on:
  workflow_call:
    inputs:
      github_repository:
        required: true
        type: string
      oscript_version:
        required: false
        default: 'default'
        type: string
      opm_version:
        description: Version of OPM to install (e.g., "1.1.0"). If empty, installs the latest version without version specification
        required: false
        default: ""
        type: string
      sonar_host_url:
        required: false
        default: 'https://sonar.openbsl.ru'
        type: string
      test_script_path:
        required: false
        type: string
        default: ./tasks/coverage.os
      additional_oscript_packages:
        description: Package list to install, space separated.
        type: string
        required: false
        default: ""
      sonarqube:
        required: false
        type: boolean
        default: true
      coveralls:
        required: false
        type: boolean
        default: false
      dotnet_version:
        description: Version of .NET to install
        type: string
        required: false
        default: ""
      build_package:
        description: Execute 'opm build .' after installing dependencies
        type: boolean
        required: false
        default: false
      os_version:
        description: Operating system to run quality control on
        type: string
        required: false
        default: "ubuntu-latest"
    secrets:
      SONAR_TOKEN:
        required: false

jobs:

  test:
    runs-on: ${{ inputs.os_version }}

    steps:
      - name: Актуализация
        uses: actions/checkout@v5.0.0

      - name: Установка .NET
        if: inputs.dotnet_version != ''
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: ${{ inputs.dotnet_version }}

      - name: Вычисление версии OneScript
        shell: bash
        id: extract_oscript_version
        run: |
          set -ex
          if [ "${{ inputs.oscript_version }}" = "default" ]
          then
            extracted_version=$(cat packagedef | grep ".ВерсияСреды(" | sed 's|[^"]*"||' | sed -r 's/".+//' || true)
            version="${extracted_version:-stable}"
          else
            version="${{ inputs.oscript_version }}"
          fi
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Установка OneScript
        uses: otymko/setup-onescript@v1.5.1
        with:
          version: ${{ steps.extract_oscript_version.outputs.version }} 

      - name: Установка зависимостей пакета
        shell: bash
        run: |
          if [ -n "${{ inputs.opm_version }}" ]; then
            opm install opm@${{ inputs.opm_version }}
          else
            opm install opm
          fi
          opm install -l --dev

      - name: Установка дополнительных пакетов
        if: inputs.additional_oscript_packages != ''
        run: opm install -l ${{ inputs.additional_oscript_packages }}

      - name: Сборка пакета
        if: inputs.build_package == true
        run: opm build .

      - name: Запуск тестов
        run: oscript ${{ inputs.test_script_path }}

      - name: Сохранение артефактов покрытия
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: out/*overage*.xml
          if-no-files-found: ignore

  sonar:
    runs-on: ${{ inputs.os_version }}
    needs: [test]
    if: ${{ (inputs.sonarqube == true) && (github.repository == inputs.github_repository) && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.event.repository.full_name) }} 
    steps:
      - name: Актуализация
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: Вычисление имени ветки
        uses: nelonoel/branch-name@v1.0.1

      - name: Скачивание артефактов
        uses: actions/download-artifact@v5
        with:
          name: coverage
          path: out

      - name: Извлечение версии пакета
        shell: bash
        run: echo "version=`cat packagedef | grep ".Версия(" | sed 's|[^"]*"||' | sed -r 's/".+//'`" >> $GITHUB_OUTPUT
        id: extract_version

      - name: Настройка sonar-scanner
        uses: warchant/setup-sonar-scanner@v9

      - name: Анализ в SonarQube (branch)
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch' 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: sonar-scanner
          -Dsonar.host.url=${{ inputs.sonar_host_url }}
          -Dsonar.branch.name=${{ env.BRANCH_NAME }}
          -Dsonar.projectVersion=${{ steps.extract_version.outputs.version }}

      # https://docs.sonarqube.org/latest/analysis/pull-request/
      - name: Анализ в SonarQube (pull-request)
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: sonar-scanner
          -Dsonar.host.url=${{ inputs.sonar_host_url }}
          -Dsonar.pullrequest.key=${{ github.event.pull_request.number }}
          -Dsonar.pullrequest.branch=${{ github.event.pull_request.head.ref }}
          -Dsonar.pullrequest.base=${{ github.event.pull_request.base.ref }}
          -Dsonar.scm.revision=${{ github.event.pull_request.head.sha }}

  coveralls:
    runs-on: ${{ inputs.os_version }}
    if: inputs.coveralls == true
    needs: [test]
    steps:
      - name: Актуализация
        uses: actions/checkout@v5.0.0
      - name: Скачивание артефактов
        uses: actions/download-artifact@v5
        with:
          name: coverage
          path: out
      - name: Отправка отчёта о покрытии в Coveralls
        uses: coverallsapp/github-action@v2
