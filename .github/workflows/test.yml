name: Тестирование

on:
  workflow_call:
    inputs:
      oscript_version:
        required: false
        default: "default"
        type: string
      test_script_path:
        required: false
        type: string
        default: ./tasks/test.os
      additional_oscript_packages:
        description: Package list to install, space separated.
        type: string
        required: false
        default: ""
      dotnet_version:
        description: Version of .NET to install
        type: string
        required: false
        default: ""
      build_package:
        description: Execute 'opm build .' after installing dependencies
        type: boolean
        required: false
        default: false
      os_versions:
        description: Operating systems to run tests on, space separated.
        type: string
        required: false
        default: "ubuntu-latest windows-latest macos-latest"

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      os-matrix: ${{ steps.set-matrix.outputs.os-matrix }}
    steps:
      - name: Prepare OS matrix
        id: set-matrix
        run: |
          # Process os_versions input to create proper JSON array
          OS_INPUT="${{ inputs.os_versions }}"

          # Handle empty input - use default
          if [ -z "${OS_INPUT// }" ]; then
            OS_INPUT="ubuntu-latest windows-latest macos-latest"
          fi

          # Convert space-separated list to JSON array
          # Split by spaces, filter out empty entries, and create JSON
          OS_ARRAY=$(echo "$OS_INPUT" | tr ' ' '\n' | \
            grep -v '^$' | sed 's/.*/"&"/' | \
            paste -sd ',' - | sed 's/.*/[&]/')

          echo "os-matrix=$OS_ARRAY" >> $GITHUB_OUTPUT
          echo "Generated OS matrix: $OS_ARRAY"

  build:
    needs: prepare
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJSON(needs.prepare.outputs.os-matrix) }}
        oscript_version:
          - ${{ inputs.oscript_version }}

    steps:
      - name: Актуализация
        uses: actions/checkout@v4.2.2

      - name: Установка свойств git
        shell: bash
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email \
            "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Установка .NET
        if: inputs.dotnet_version != ''
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet_version }}

      - name: Вычисление версии OneScript
        shell: bash
        id: extract_oscript_version
        run: |
          set -ex
          if [ "${{ inputs.oscript_version }}" = "default" ]
          then
            extracted_version=$(cat packagedef | \
              grep ".ВерсияСреды(" | sed 's|[^"]*"||' | \
              sed -r 's/".+//' || true)
            version="${extracted_version:-stable}"
          else
            version="${{ inputs.oscript_version }}"
          fi
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Установка OneScript
        uses: otymko/setup-onescript@v1.5
        with:
          version: ${{ steps.extract_oscript_version.outputs.version }}

      - name: Установка зависимостей
        run: |
          opm install opm
          opm install -l --dev

      - name: Установка дополнительных пакетов
        if: inputs.additional_oscript_packages != ''
        run: opm install -l ${{ inputs.additional_oscript_packages }}

      - name: Сборка пакета
        if: inputs.build_package == true
        run: opm build .

      - name: Тестирование
        run: oscript ${{ inputs.test_script_path}}
